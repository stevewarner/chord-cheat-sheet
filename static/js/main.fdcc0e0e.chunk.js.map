{"version":3,"sources":["components/Sidebar.js","components/Select.js","pages/ChordView.js","App.js","reportWebVitals.js","index.js"],"names":["Title","styled","h1","Button","button","props","active","css","Sidebar","currentMode","selectMode","Modes","className","map","mode","type","onClick","toString","Select","value","onChange","dropdownOptions","e","target","selected","notes","ChordView","useState","noteValue","setNoteValue","modeValue","setModeValue","noteOptions","secondaryDominants","shuffledNotes","i","indexOf","push","shift","Object","keys","patterns","pattern","chord","index","degrees","intervals","degree","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4/EAGMA,EAAQC,IAAOC,GAAV,4GAMLC,EAASF,IAAOG,OAAV,+aAoBR,SAACC,GAAD,OACAA,EAAMC,QACNC,YADA,+DAuCWC,EAjCC,SAACH,GAAW,IAClBI,EAAmCJ,EAAnCI,YAAaC,EAAsBL,EAAtBK,WAAYC,EAAUN,EAAVM,MACjC,OACE,sBAAKC,UAAU,UAAf,UACE,eAACZ,EAAD,mBAEE,uBAFF,QAIE,uBAJF,WAOA,qBAAKY,UAAU,QAAf,SACGD,EAAME,KAAI,SAACC,GAAD,OACT,cAACX,EAAD,CACEY,KAAK,SACLC,QAAS,kBAAMN,EAAWI,IAE1BR,OAAQG,IAAgBK,EAJ1B,SAMGA,GAHIA,EAAKG,qBC/BPC,EAnBA,SAACb,GAAW,IACjBc,EAAqCd,EAArCc,MAAOC,EAA8Bf,EAA9Be,SAAUC,EAAoBhB,EAApBgB,gBACzB,OACE,wBAAQF,MAAOA,EAAOC,SAAU,SAACE,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,QAAzD,SACGE,EAAgBR,KAAI,SAACW,GAAD,OACnB,wBAAuBL,MAAOK,EAA9B,SACGA,GADUA,S,OCAbC,E,MAAAA,MAuFOC,EArFG,WAUhB,IAVuB,IAAD,EACYC,mBAAS,KADrB,mBACfC,EADe,KACJC,EADI,OAEYF,mBAAS,UAFrB,mBAEfG,EAFe,KAEJC,EAFI,KAIhBC,EAAW,YAAOP,GAClBQ,EAAkB,YAAOR,GACzBS,EAAa,YAAOT,GAIjBU,EAAI,EAAGA,EAAIV,EAAMW,QAAQR,GAAYO,IAC5CD,EAAcG,KAAKH,EAAcI,SAGnC,IAAK,IAAIH,EAAI,EAAGA,EAAIV,EAAMW,QAAQR,GAAa,EAAGO,IAChDF,EAAmBI,KAAKJ,EAAmBK,SAa7C,OACE,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,CACEH,YAAaqB,EACbpB,WAAYqB,EACZpB,MAAO4B,OAAOC,KAAK7B,KAErB,sBAAKC,UAAU,OAAf,UACE,oCAEE,cAAC,EAAD,CACEO,MAAOS,EACPR,SAAUS,EACVR,gBAAiBW,IAElBF,EAPH,sBAUCS,OAAOC,KAAK7B,EAAMmB,GAAWW,UAAU5B,KAAI,SAAC6B,GAAD,OAC1C,gCACE,uCAAQA,EAAR,aACA,qBAAK9B,UAAU,iBAAf,SACGD,EAAMmB,GAAWW,SAASC,GAAS7B,KAAI,SAAC8B,EAAOC,GAAR,OACtC,sBAEEhC,UAAS,eAAoB,SAAV+B,EAAmB,SAAW,IAFnD,UAIE,4BAAIhC,EAAMmB,GAAWe,QAAQD,KAC7B,sCACEV,EAAcvB,EAAMmB,GAAWgB,UAAUF,KAD3C,OAEGD,OANEC,UALHF,MAiBZ,2DACA,qBAAK9B,UAAU,iBAAf,SACGD,EAAMmB,GAAWe,QAAQhC,KAAI,SAACkC,EAAQH,GAAT,OAC5B,sBAEEhC,UAAS,eAAqB,SAAXmC,EAAoB,SAAW,IAFpD,UAIE,4BACa,IAAVH,EAAc,KAAd,YAA0BjC,EAAMmB,GAAWe,QAAQD,MAEtD,sCACEX,EAAmBtB,EAAMmB,GAAWgB,UAAUF,IADhD,SANKA,eCvEJI,G,MAFH,kBAAM,cAAC,EAAD,MCQHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fdcc0e0e.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Title = styled.h1`\n  padding: 10px 20px;\n  transform: skew(0deg, -10deg);\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  text-transform: capitalize;\n  background: none;\n  color: #fff;\n  outline: 0;\n  border: none;\n  padding: 8px;\n  margin-left: 16px;\n  text-align: start;\n  font-size: 16px;\n  transition: ease background-color 250ms;\n  cursor: pointer;\n  &:hover {\n    background-color: #5b616b;\n  }\n  &:focus {\n    background-color: #5b616b;\n    outline: -webkit-focus-ring-color auto 1px;\n  }\n\n  ${(props) =>\n    props.active &&\n    css`\n      background: #5b616b;\n    `}\n`;\n\nconst Sidebar = (props) => {\n  const { currentMode, selectMode, Modes } = props;\n  return (\n    <div className=\"sidebar\">\n      <Title>\n        chord\n        <br />\n        cheat\n        <br />\n        sheet\n      </Title>\n      <div className=\"modes\">\n        {Modes.map((mode) => (\n          <Button\n            type=\"button\"\n            onClick={() => selectMode(mode)}\n            key={mode.toString()}\n            active={currentMode === mode}\n          >\n            {mode}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nSidebar.propTypes = {\n  currentMode: PropTypes.string,\n  selectMode: PropTypes.func,\n  Modes: PropTypes.array,\n};\n\nexport default Sidebar;\n","import PropTypes from 'prop-types';\n\nconst Select = (props) => {\n  const { value, onChange, dropdownOptions } = props;\n  return (\n    <select value={value} onChange={(e) => onChange(e.target.value)}>\n      {dropdownOptions.map((selected) => (\n        <option key={selected} value={selected}>\n          {selected}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nSelect.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  dropdownOptions: PropTypes.array,\n};\n\nexport default Select;\n","/* eslint-disable no-plusplus */\nimport { useState } from 'react';\nimport Sidebar from '../components/Sidebar';\nimport Select from '../components/Select';\nimport Modes from '../modes-data.json';\nimport ChordOptions from '../chord-options.json';\n\nconst { notes } = ChordOptions;\n\nconst ChordView = () => {\n  const [noteValue, setNoteValue] = useState('C');\n  const [modeValue, setModeValue] = useState('ionian');\n\n  const noteOptions = [...notes];\n  const secondaryDominants = [...notes];\n  const shuffledNotes = [...notes];\n\n  //   const shuffledPatterns = { ...patterns };\n\n  for (let i = 0; i < notes.indexOf(noteValue); i++) {\n    shuffledNotes.push(shuffledNotes.shift());\n  }\n\n  for (let i = 0; i < notes.indexOf(noteValue) + 7; i++) {\n    secondaryDominants.push(secondaryDominants.shift());\n  }\n\n  // const selectedMode = 'ionian';\n\n  // eslint-disable-next-line no-plusplus\n  //   for (let i = 0; i < Modes[modeValue].key; i++) {\n  //     shuffledPatterns.triad.push(shuffledPatterns.triad.shift());\n  //     shuffledPatterns.seventh.push(shuffledPatterns.seventh.shift());\n  //     shuffledPatterns.extended.push(shuffledPatterns.extended.shift());\n  //   }\n  //   console.log(Modes[modeValue].key);\n  //   console.log(shuffledPatterns);\n  return (\n    <div className=\"App\">\n      <Sidebar\n        currentMode={modeValue}\n        selectMode={setModeValue}\n        Modes={Object.keys(Modes)}\n      />\n      <div className=\"main\">\n        <h1>\n          in\n          <Select\n            value={noteValue}\n            onChange={setNoteValue}\n            dropdownOptions={noteOptions}\n          />\n          {modeValue} you can play...\n        </h1>\n\n        {Object.keys(Modes[modeValue].patterns).map((pattern) => (\n          <div key={pattern}>\n            <h2>{`${pattern} Chords`}</h2>\n            <div className=\"chords-section\">\n              {Modes[modeValue].patterns[pattern].map((chord, index) => (\n                <div\n                  key={index}\n                  className={`card ${chord === 'none' ? 'hidden' : ''}`}\n                >\n                  <p>{Modes[modeValue].degrees[index]}</p>\n                  <p>{`${\n                    shuffledNotes[Modes[modeValue].intervals[index]]\n                  }${chord}`}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        <h2>Secondary Dominant Chords</h2>\n        <div className=\"chords-section\">\n          {Modes[modeValue].degrees.map((degree, index) => (\n            <div\n              key={index}\n              className={`card ${degree === 'none' ? 'hidden' : ''}`}\n            >\n              <p>\n                {index === 0 ? 'V7' : `V/${Modes[modeValue].degrees[index]}`}\n              </p>\n              <p>{`${\n                secondaryDominants[Modes[modeValue].intervals[index]]\n              }7`}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChordView;\n","import ChordView from './pages/ChordView';\n\nimport './App.css';\n\nconst App = () => <ChordView />;\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}